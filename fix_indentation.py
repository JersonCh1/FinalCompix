#!/usr/bin/env python3
"""
Script para arreglar el error de indentaci√≥n en sintactico.py
"""

import os
import sys

def arreglar_indentacion_sintactico():
    """Arregla el error de indentaci√≥n en sintactico.py"""
    print("üîß Arreglando error de indentaci√≥n en sintactico.py...")
    
    sintactico_path = 'compilador/sintactico.py'
    
    if not os.path.exists(sintactico_path):
        print(f"‚ùå No se encontr√≥ el archivo: {sintactico_path}")
        return False
    
    # Leer el archivo
    with open(sintactico_path, 'r', encoding='utf-8') as f:
        contenido = f.read()
    
    # Crear backup
    backup_path = f"{sintactico_path}.backup_indent"
    with open(backup_path, 'w', encoding='utf-8') as f:
        f.write(contenido)
    print(f"‚úì Backup creado: {backup_path}")
    
    # Buscar y arreglar el problema de indentaci√≥n
    lineas = contenido.split('\n')
    
    # Encontrar la l√≠nea problem√°tica
    linea_problema = -1
    for i, linea in enumerate(lineas):
        if 'def es_terminal_mejorado(simbolo, lista_tokens):' in linea:
            linea_problema = i
            break
    
    if linea_problema == -1:
        print("‚ùå No se encontr√≥ la funci√≥n es_terminal_mejorado")
        return False
    
    print(f"‚úì Funci√≥n encontrada en l√≠nea {linea_problema + 1}")
    
    # Arreglar la indentaci√≥n - la funci√≥n debe estar al nivel de la funci√≥n analizador_sintactico
    # Buscar el nivel de indentaci√≥n correcto
    nivel_correcto = 0
    for i in range(linea_problema - 1, -1, -1):
        if lineas[i].strip().startswith('def analizador_sintactico'):
            nivel_correcto = len(lineas[i]) - len(lineas[i].lstrip())
            break
    
    # Arreglar la indentaci√≥n de es_terminal_mejorado y su contenido
    i = linea_problema
    while i < len(lineas) and (lineas[i].strip() == '' or 'es_terminal_mejorado' in lineas[i] or lineas[i].startswith('    ')):
        if lineas[i].strip():
            # Calcular nueva indentaci√≥n
            contenido_linea = lineas[i].lstrip()
            if 'def es_terminal_mejorado' in contenido_linea:
                # Funci√≥n al mismo nivel que analizador_sintactico
                lineas[i] = ' ' * nivel_correcto + contenido_linea
            elif contenido_linea.startswith('"""') or contenido_linea.startswith('#'):
                # Docstring o comentario dentro de la funci√≥n
                lineas[i] = ' ' * (nivel_correcto + 4) + contenido_linea
            else:
                # Contenido de la funci√≥n
                lineas[i] = ' ' * (nivel_correcto + 4) + contenido_linea
        i += 1
    
    # Escribir el archivo corregido
    contenido_corregido = '\n'.join(lineas)
    with open(sintactico_path, 'w', encoding='utf-8') as f:
        f.write(contenido_corregido)
    
    print("‚úÖ Error de indentaci√≥n corregido")
    return True

def verificar_sintaxis():
    """Verifica que no hay errores de sintaxis despu√©s del arreglo"""
    print("üîç Verificando sintaxis de sintactico.py...")
    
    try:
        import ast
        with open('compilador/sintactico.py', 'r', encoding='utf-8') as f:
            codigo = f.read()
        
        ast.parse(codigo)
        print("‚úÖ Sintaxis correcta")
        return True
    except SyntaxError as e:
        print(f"‚ùå Error de sintaxis: {e}")
        print(f"   L√≠nea {e.lineno}: {e.text}")
        return False
    except Exception as e:
        print(f"‚ùå Error verificando sintaxis: {e}")
        return False

def probar_compilacion_simple():
    """Prueba una compilaci√≥n simple despu√©s del arreglo"""
    print("üß™ Probando compilaci√≥n simple...")
    
    import subprocess
    
    try:
        resultado = subprocess.run([
            sys.executable, 'compilador_completo.py', '--file', 'holamundo.txt'
        ], capture_output=True, text=True, timeout=30)
        
        if "IndentationError" in resultado.stderr:
            print("‚ùå A√∫n hay errores de indentaci√≥n")
            return False
        elif "SyntaxError" in resultado.stderr:
            print("‚ùå Hay errores de sintaxis")
            return False
        elif resultado.returncode == 0:
            print("‚úÖ Compilaci√≥n exitosa")
            return True
        else:
            print("‚ö†Ô∏è Compilaci√≥n completada pero con advertencias")
            return True
            
    except subprocess.TimeoutExpired:
        print("‚ö†Ô∏è Timeout - pero no hay errores de sintaxis")
        return True
    except Exception as e:
        print(f"‚ùå Error ejecutando prueba: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üéØ ARREGLO DE ERROR DE INDENTACI√ìN")
    print("=" * 40)
    
    if not arreglar_indentacion_sintactico():
        print("‚ùå No se pudo arreglar la indentaci√≥n")
        return False
    
    if not verificar_sintaxis():
        print("‚ùå A√∫n hay errores de sintaxis")
        return False
    
    if not probar_compilacion_simple():
        print("‚ùå La compilaci√≥n a√∫n falla")
        return False
    
    print("\nüéâ ¬°√âXITO!")
    print("   Error de indentaci√≥n arreglado")
    print("   El compilador deber√≠a funcionar ahora")
    print("\nüöÄ SIGUIENTE PASO:")
    print("   python validador_rubrica.py")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)