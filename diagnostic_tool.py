#!/usr/bin/env python3
"""
Herramienta de Diagn√≥stico para el Analizador Sint√°ctico
========================================================
Identifica exactamente qu√© est√° fallando en el compilador
"""

import os
import sys
import subprocess

def diagnosticar_archivo_especifico(archivo):
    """Diagn√≥stica un archivo espec√≠fico con detalles"""
    print(f"\nüîç DIAGN√ìSTICO DETALLADO: {archivo}")
    print("=" * 50)
    
    # Modificar archivo objetivo
    lexico_path = 'compilador/lexico.py'
    with open(lexico_path, 'r', encoding='utf-8') as f:
        contenido = f.read()
    
    # Cambiar archivo objetivo
    lineas = contenido.split('\n')
    for i, linea in enumerate(lineas):
        if linea.strip().startswith("archivo = "):
            lineas[i] = f"archivo = '{archivo}'"
            break
    
    with open(lexico_path, 'w', encoding='utf-8') as f:
        f.write('\n'.join(lineas))
    
    # Ejecutar compilador con captura detallada
    try:
        resultado = subprocess.run([
            sys.executable, 'compilador/sintactico.py'
        ], capture_output=True, text=True, timeout=10)
        
        print(f"üìä C√≥digo de salida: {resultado.returncode}")
        print("\nüìù SALIDA COMPLETA:")
        print("-" * 40)
        print(resultado.stdout)
        print("-" * 40)
        
        if resultado.stderr:
            print("\n‚ùå ERRORES:")
            print("-" * 40)
            print(resultado.stderr)
            print("-" * 40)
        
        # Analizar la salida
        analizar_salida(resultado.stdout, resultado.stderr)
        
    except subprocess.TimeoutExpired:
        print("‚è∞ TIMEOUT - El compilador se colg√≥")
    except Exception as e:
        print(f"üí• ERROR EJECUTANDO: {e}")

def analizar_salida(stdout, stderr):
    """Analiza la salida para identificar problemas espec√≠ficos"""
    print("\nüî¨ AN√ÅLISIS DE RESULTADOS:")
    
    # Verificar etapas completadas
    etapas = {
        'L√©xico': 'Analisis lexico exitoso' in stdout,
        'Tokens guardados': 'Tokens escritos exitosamente' in stdout,
        'Sint√°ctico': 'An√°lisis sint√°ctico exitoso' in stdout,
        '√Årbol generado': '.dot creado en:' in stdout,
        'Tabla s√≠mbolos': 'Tabla de s√≠mbolos generada' in stdout,
        'Sem√°ntico': 'Verificaci√≥n sem√°ntica exitosa' in stdout,
        'Tipos': 'Verificaci√≥n de tipos exitosa' in stdout,
        'Assembly': 'assembly generado exitosamente' in stdout
    }
    
    for etapa, completada in etapas.items():
        status = "‚úÖ" if completada else "‚ùå"
        print(f"   {status} {etapa}")
    
    # Buscar errores espec√≠ficos
    if 'Error sint√°ctico' in stdout:
        print("\nüö® ERROR SINT√ÅCTICO DETECTADO:")
        lineas = stdout.split('\n')
        for linea in lineas:
            if 'Error' in linea or 'error' in linea:
                print(f"   {linea}")
    
    if 'se esperaba' in stdout:
        print("\nüéØ PROBLEMA DE PARSING:")
        lineas = stdout.split('\n')
        for linea in lineas:
            if 'se esperaba' in linea:
                print(f"   {linea}")
    
    # Verificar archivos generados
    verificar_archivos_generados()

def verificar_archivos_generados():
    """Verifica qu√© archivos se generaron"""
    print("\nüìÅ ARCHIVOS GENERADOS:")
    
    directorios = [
        ('salida-tokens', '*.txt'),
        ('salida-arboles', '*.dot'),
        ('salida-arboles', '*.csv'),
        ('salida-assembly', '*.s'),
        ('salida-assembly-mips', '*.asm')
    ]
    
    import glob
    from pathlib import Path
    
    for directorio, patron in directorios:
        if os.path.exists(directorio):
            archivos = list(Path(directorio).glob(patron))
            if archivos:
                print(f"   ‚úÖ {directorio}: {len(archivos)} archivos")
                for archivo in archivos[-2:]:  # Mostrar √∫ltimos 2
                    print(f"      - {archivo.name}")
            else:
                print(f"   ‚ùå {directorio}: sin archivos")
        else:
            print(f"   ‚ùå {directorio}: directorio no existe")

def probar_tabla_ll1():
    """Verifica que la tabla LL(1) est√© correcta"""
    print("\nüîç VERIFICANDO TABLA LL(1):")
    
    tabla_path = 'tabla-ll1/tabla_ll1.csv'
    if not os.path.exists(tabla_path):
        print("‚ùå Tabla LL(1) no existe")
        return False
    
    try:
        import pandas as pd
        df = pd.read_csv(tabla_path, index_col=0)
        
        print(f"   ‚úÖ Tabla cargada: {df.shape[0]} filas, {df.shape[1]} columnas")
        
        # Verificar entradas cr√≠ticas
        entradas_criticas = [
            ('masinstrucciones', 'condicional'),
            ('instruccion', 'condicional'),
            ('condicional', 'condicional'),
            ('masinstrucciones', 'funcion'),
            ('programaprincipal', 'funcion')
        ]
        
        for fila, columna in entradas_criticas:
            if fila in df.index and columna in df.columns:
                valor = df.at[fila, columna]
                if pd.isna(valor) or valor.strip() == '':
                    print(f"   ‚ùå {fila} + {columna}: VAC√çO")
                else:
                    print(f"   ‚úÖ {fila} + {columna}: '{valor}'")
            else:
                print(f"   ‚ùå {fila} + {columna}: NO EXISTE")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error verificando tabla: {e}")
        return False

def main():
    """Funci√≥n principal de diagn√≥stico"""
    print("üî¨ HERRAMIENTA DE DIAGN√ìSTICO SINT√ÅCTICO")
    print("=" * 45)
    
    # Verificar tabla LL(1) primero
    probar_tabla_ll1()
    
    # Diagnosticar archivos espec√≠ficos
    archivos_prueba = [
        'holamundo.txt',        # M√°s simple
        'tipos-validos.txt',    # Expresiones b√°sicas
        'if-else-test.txt',     # If-else
        'recursion-test.txt'    # Funciones
    ]
    
    for archivo in archivos_prueba:
        if os.path.exists(f'codigos-bocetos/{archivo}'):
            diagnosticar_archivo_especifico(archivo)
        else:
            print(f"\n‚ùå Archivo no encontrado: {archivo}")
    
    print("\n" + "=" * 60)
    print("üìã RESUMEN DEL DIAGN√ìSTICO")
    print("=" * 60)
    print("1. Revisa los errores sint√°cticos espec√≠ficos arriba")
    print("2. Verifica que la tabla LL(1) tenga las entradas necesarias")
    print("3. Si hay problemas de parsing, revisa la gram√°tica")
    print("4. Si no se genera assembly, revisa el m√≥dulo assembly_mips.py")

if __name__ == "__main__":
    main()